{"ast":null,"code":"import axios from 'axios';\nconst API_URL = 'http://localhost:8080/api/auth/';\nclass AuthService {\n  async login(username, password) {\n    console.log('Attempting login for user:', username);\n    try {\n      // Create the request configuration with CORS headers\n      const config = {\n        headers: {\n          'Content-Type': 'application/json',\n          'Accept': 'application/json'\n        }\n      };\n\n      // Make the login request\n      const response = await axios.post(API_URL + 'login', {\n        username,\n        password\n      }, config);\n      console.log('Login response:', response);\n\n      // Check if we have a valid token in the response\n      if (response.data && response.data.token) {\n        // Store user details in localStorage\n        localStorage.setItem('user', JSON.stringify(response.data));\n        return response.data;\n      } else {\n        console.error('Invalid login response format:', response.data);\n        return {\n          success: false,\n          message: 'Invalid response from server. Please try again.'\n        };\n      }\n    } catch (error) {\n      console.error('Login error:', error);\n\n      // Handle error response\n      if (error.response) {\n        console.error('Error response status:', error.response.status);\n        console.error('Error response data:', error.response.data);\n        if (error.response.data && error.response.data.message) {\n          return {\n            success: false,\n            message: error.response.data.message\n          };\n        }\n      }\n      return {\n        success: false,\n        message: error.message || 'Login failed. Please try again.'\n      };\n    }\n  }\n  logout() {\n    localStorage.removeItem('user');\n  }\n  register(username, email, password, role) {\n    console.log('Registering new user:', username, 'with role:', role);\n    return axios.post(API_URL + 'register', {\n      username,\n      email,\n      password,\n      role\n    }).then(response => {\n      console.log('Registration successful:', response.data);\n      return response;\n    }).catch(error => {\n      console.error('Registration error:', error);\n      throw error;\n    });\n  }\n  getCurrentUser() {\n    return JSON.parse(localStorage.getItem('user'));\n  }\n}\nexport default new AuthService();","map":{"version":3,"names":["axios","API_URL","AuthService","login","username","password","console","log","config","headers","response","post","data","token","localStorage","setItem","JSON","stringify","error","success","message","status","logout","removeItem","register","email","role","then","catch","getCurrentUser","parse","getItem"],"sources":["C:/Users/supra/OneDrive/Documents/logistics/frontend/src/services/authService.js"],"sourcesContent":["import axios from 'axios';\n\nconst API_URL = 'http://localhost:8080/api/auth/';\n\nclass AuthService {\n  async login(username, password) {\n    console.log('Attempting login for user:', username);\n    try {\n      // Create the request configuration with CORS headers\n      const config = {\n        headers: {\n          'Content-Type': 'application/json',\n          'Accept': 'application/json'\n        }\n      };\n      \n      // Make the login request\n      const response = await axios.post(\n        API_URL + 'login', \n        { username, password },\n        config\n      );\n      \n      console.log('Login response:', response);\n      \n      // Check if we have a valid token in the response\n      if (response.data && response.data.token) {\n        // Store user details in localStorage\n        localStorage.setItem('user', JSON.stringify(response.data));\n        return response.data;\n      } else {\n        console.error('Invalid login response format:', response.data);\n        return { \n          success: false, \n          message: 'Invalid response from server. Please try again.' \n        };\n      }\n    } catch (error) {\n      console.error('Login error:', error);\n      \n      // Handle error response\n      if (error.response) {\n        console.error('Error response status:', error.response.status);\n        console.error('Error response data:', error.response.data);\n        \n        if (error.response.data && error.response.data.message) {\n          return { \n            success: false, \n            message: error.response.data.message \n          };\n        }\n      }\n      \n      return { \n        success: false, \n        message: error.message || 'Login failed. Please try again.' \n      };\n    }\n  }\n\n  logout() {\n    localStorage.removeItem('user');\n  }\n\n  register(username, email, password, role) {\n    console.log('Registering new user:', username, 'with role:', role);\n    return axios.post(API_URL + 'register', {\n      username,\n      email,\n      password,\n      role\n    })\n    .then(response => {\n      console.log('Registration successful:', response.data);\n      return response;\n    })\n    .catch(error => {\n      console.error('Registration error:', error);\n      throw error;\n    });\n  }\n\n  getCurrentUser() {\n    return JSON.parse(localStorage.getItem('user'));\n  }\n}\n\nexport default new AuthService();\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}