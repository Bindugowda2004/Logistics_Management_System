{"ast":null,"code":"import axios from 'axios';\nconst API_URL = 'http://localhost:8080/api/auth/';\nclass AuthService {\n  login(username, password) {\n    console.log('Attempting login for user:', username);\n    return axios.post(API_URL + 'login', {\n      username,\n      password\n    }).then(response => {\n      console.log('Login response:', response);\n      if (response.data && response.data.token) {\n        localStorage.setItem('user', JSON.stringify(response.data));\n        return response.data;\n      } else {\n        console.error('Invalid login response format:', response.data);\n        return {\n          success: false,\n          message: 'Invalid response from server. Please try again.'\n        };\n      }\n    }).catch(error => {\n      console.error('Login error:', error);\n      // Handle error response\n      if (error.response) {\n        console.error('Error response status:', error.response.status);\n        console.error('Error response data:', error.response.data);\n        if (error.response.data && error.response.data.message) {\n          return {\n            success: false,\n            message: error.response.data.message\n          };\n        }\n      }\n      return {\n        success: false,\n        message: error.message || 'Login failed. Please try again.'\n      };\n    });\n  }\n  logout() {\n    localStorage.removeItem('user');\n  }\n  register(username, email, password, role) {\n    console.log('Registering new user:', username, 'with role:', role);\n    return axios.post(API_URL + 'register', {\n      username,\n      email,\n      password,\n      role\n    }).then(response => {\n      console.log('Registration successful:', response.data);\n      return response;\n    }).catch(error => {\n      console.error('Registration error:', error);\n      throw error;\n    });\n  }\n  getCurrentUser() {\n    return JSON.parse(localStorage.getItem('user'));\n  }\n}\nexport default new AuthService();","map":{"version":3,"names":["axios","API_URL","AuthService","login","username","password","console","log","post","then","response","data","token","localStorage","setItem","JSON","stringify","error","success","message","catch","status","logout","removeItem","register","email","role","getCurrentUser","parse","getItem"],"sources":["C:/Users/supra/OneDrive/Documents/logistics/frontend/src/services/authService.js"],"sourcesContent":["import axios from 'axios';\n\nconst API_URL = 'http://localhost:8080/api/auth/';\n\nclass AuthService {\n  login(username, password) {\n    console.log('Attempting login for user:', username);\n    return axios\n      .post(API_URL + 'login', {\n        username,\n        password\n      })\n      .then(response => {\n        console.log('Login response:', response);\n        if (response.data && response.data.token) {\n          localStorage.setItem('user', JSON.stringify(response.data));\n          return response.data;\n        } else {\n          console.error('Invalid login response format:', response.data);\n          return { \n            success: false, \n            message: 'Invalid response from server. Please try again.' \n          };\n        }\n      })\n      .catch(error => {\n        console.error('Login error:', error);\n        // Handle error response\n        if (error.response) {\n          console.error('Error response status:', error.response.status);\n          console.error('Error response data:', error.response.data);\n          \n          if (error.response.data && error.response.data.message) {\n            return { \n              success: false, \n              message: error.response.data.message \n            };\n          }\n        }\n        return { \n          success: false, \n          message: error.message || 'Login failed. Please try again.' \n        };\n      });\n  }\n\n  logout() {\n    localStorage.removeItem('user');\n  }\n\n  register(username, email, password, role) {\n    console.log('Registering new user:', username, 'with role:', role);\n    return axios.post(API_URL + 'register', {\n      username,\n      email,\n      password,\n      role\n    })\n    .then(response => {\n      console.log('Registration successful:', response.data);\n      return response;\n    })\n    .catch(error => {\n      console.error('Registration error:', error);\n      throw error;\n    });\n  }\n\n  getCurrentUser() {\n    return JSON.parse(localStorage.getItem('user'));\n  }\n}\n\nexport default new AuthService();\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAEzB,MAAMC,OAAO,GAAG,iCAAiC;AAEjD,MAAMC,WAAW,CAAC;EAChBC,KAAKA,CAACC,QAAQ,EAAEC,QAAQ,EAAE;IACxBC,OAAO,CAACC,GAAG,CAAC,4BAA4B,EAAEH,QAAQ,CAAC;IACnD,OAAOJ,KAAK,CACTQ,IAAI,CAACP,OAAO,GAAG,OAAO,EAAE;MACvBG,QAAQ;MACRC;IACF,CAAC,CAAC,CACDI,IAAI,CAACC,QAAQ,IAAI;MAChBJ,OAAO,CAACC,GAAG,CAAC,iBAAiB,EAAEG,QAAQ,CAAC;MACxC,IAAIA,QAAQ,CAACC,IAAI,IAAID,QAAQ,CAACC,IAAI,CAACC,KAAK,EAAE;QACxCC,YAAY,CAACC,OAAO,CAAC,MAAM,EAAEC,IAAI,CAACC,SAAS,CAACN,QAAQ,CAACC,IAAI,CAAC,CAAC;QAC3D,OAAOD,QAAQ,CAACC,IAAI;MACtB,CAAC,MAAM;QACLL,OAAO,CAACW,KAAK,CAAC,gCAAgC,EAAEP,QAAQ,CAACC,IAAI,CAAC;QAC9D,OAAO;UACLO,OAAO,EAAE,KAAK;UACdC,OAAO,EAAE;QACX,CAAC;MACH;IACF,CAAC,CAAC,CACDC,KAAK,CAACH,KAAK,IAAI;MACdX,OAAO,CAACW,KAAK,CAAC,cAAc,EAAEA,KAAK,CAAC;MACpC;MACA,IAAIA,KAAK,CAACP,QAAQ,EAAE;QAClBJ,OAAO,CAACW,KAAK,CAAC,wBAAwB,EAAEA,KAAK,CAACP,QAAQ,CAACW,MAAM,CAAC;QAC9Df,OAAO,CAACW,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAACP,QAAQ,CAACC,IAAI,CAAC;QAE1D,IAAIM,KAAK,CAACP,QAAQ,CAACC,IAAI,IAAIM,KAAK,CAACP,QAAQ,CAACC,IAAI,CAACQ,OAAO,EAAE;UACtD,OAAO;YACLD,OAAO,EAAE,KAAK;YACdC,OAAO,EAAEF,KAAK,CAACP,QAAQ,CAACC,IAAI,CAACQ;UAC/B,CAAC;QACH;MACF;MACA,OAAO;QACLD,OAAO,EAAE,KAAK;QACdC,OAAO,EAAEF,KAAK,CAACE,OAAO,IAAI;MAC5B,CAAC;IACH,CAAC,CAAC;EACN;EAEAG,MAAMA,CAAA,EAAG;IACPT,YAAY,CAACU,UAAU,CAAC,MAAM,CAAC;EACjC;EAEAC,QAAQA,CAACpB,QAAQ,EAAEqB,KAAK,EAAEpB,QAAQ,EAAEqB,IAAI,EAAE;IACxCpB,OAAO,CAACC,GAAG,CAAC,uBAAuB,EAAEH,QAAQ,EAAE,YAAY,EAAEsB,IAAI,CAAC;IAClE,OAAO1B,KAAK,CAACQ,IAAI,CAACP,OAAO,GAAG,UAAU,EAAE;MACtCG,QAAQ;MACRqB,KAAK;MACLpB,QAAQ;MACRqB;IACF,CAAC,CAAC,CACDjB,IAAI,CAACC,QAAQ,IAAI;MAChBJ,OAAO,CAACC,GAAG,CAAC,0BAA0B,EAAEG,QAAQ,CAACC,IAAI,CAAC;MACtD,OAAOD,QAAQ;IACjB,CAAC,CAAC,CACDU,KAAK,CAACH,KAAK,IAAI;MACdX,OAAO,CAACW,KAAK,CAAC,qBAAqB,EAAEA,KAAK,CAAC;MAC3C,MAAMA,KAAK;IACb,CAAC,CAAC;EACJ;EAEAU,cAAcA,CAAA,EAAG;IACf,OAAOZ,IAAI,CAACa,KAAK,CAACf,YAAY,CAACgB,OAAO,CAAC,MAAM,CAAC,CAAC;EACjD;AACF;AAEA,eAAe,IAAI3B,WAAW,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}